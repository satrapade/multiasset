
\documentclass{article}


\usepackage[portrait, headheight = 0cm, margin=0.25cm, top = 0.25cm]{geometry} 
\usepackage[export]{adjustbox} 
\usepackage{graphicx}
\usepackage[dvipsnames,table]{xcolor} % [dvipsnames,table] for setting colors \usepackage{amsmath} \usepackage{xfrac}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{shapes.misc}
%\usetikzlibrary{external}
%\tikzexternalize % activate!
%\usepackage{sparklines}
\usepackage{xfrac}
\usepackage[space]{grffile}
\usepackage{hyperref}
\usepackage{listings}

\DeclareRobustCommand\Tstrut{\rule{0pt}{2.6ex}}         % = `top' strut
\DeclareRobustCommand\Bstrut{\rule[-0.9ex]{0pt}{0pt}}   % = `bottom' strut
\renewcommand{\familydefault}{\sfdefault}


\begin{document}


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

source("https://raw.githubusercontent.com/satrapade/latex_utils/master/latex_helpers_v2.R")

source("https://raw.githubusercontent.com/satrapade/utility/master/utility_functions.R")
source("https://raw.githubusercontent.com/satrapade/utility/master/nn_cast.R")

temp_files<-list.files(
    path="figure",
    pattern="pdf$",
    recursive = FALSE,
    full.names = TRUE
)
file.remove(temp_files)

require(data.table)
require(scales)
require(RcppRoll)
require(magrittr)
require(fasttime)
require(lubridate)
require(scales)
require(fields)
require(gsubfn)
require(stringi)
require(Matrix)
require(akima)
require(ggplot2)


source("create_dof_report_backtest_functions.R")

# read DOF performance, 
# convert character to Date
# convert daily P&L to cummulative P&L
dof<- fread("dof.csv") %>% 
{setNames(.,tolower(names(.)))} %>%
{.$date<-as.Date(.$date,format="%Y-%m-%d"); .} %>%
{.$pnl<-cumsum(.$pnl); .}



@

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
source("create_dof_report_strategies.R")
@

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
#
# plotting functions
#

plot_backtest<-function(backtest){

  g<- backtest %>% 
    ggplot() + 
    geom_line(aes(x=date,y=pnl),size=2,alpha=0.75)+ 
    scale_x_date(breaks = pretty_breaks(10)) +
    theme(plot.title = element_text(size=28))
  g
  
}

#
#
make_simple_backtest_plot<-function(
  backtest,
  the_market,
  the_strategy,
  height="4cm",
  width="4cm"
)
{

  backtest_plot<- backtest %>% 
    ggplot() + 
    geom_line(aes(x=date,y=pnl),size=2,alpha=0.75)+ 
    ggtitle(paste0(toupper(the_market)," : ",the_strategy))+
    scale_x_date(breaks = pretty_breaks(10)) +
    theme(plot.title = element_text(size=28))
  
  plot_latex<-make_plot(
    plot(backtest_plot),
    height=height,
    width=width,
    envir=environment()
  )
  
  plot_latex
  
}

#
#
make_sl_plot<-function(
  w,
  v=c("max_draw","median_draw"),
  backtest=weighted_strategy( weights=weights[[w]], backtests=all_backtests_3m)[date %in% dof$date],
  sl_levels=seq(0,0.1,length.out = 20)
){
  res<-melt(
    make_sl_stats(w, backtest=backtest,sl_levels = sl_levels)[,c("levels",v),with=FALSE],
    id.vars = "levels",
    measure.vars = v
  ) 
  res %>%
  ggplot() +
  geom_line(aes(x=levels,y=value,col=variable),size=2,alpha=0.75) +
  ggtitle(paste0(w,"-weight vs DOF drawdowns"))
}


#
#
make_drawdown_plot <- function(
  w,
  stop_level=0.025,
  backtest=weighted_strategy(
    weights=weights[[w]],
    backtests=all_backtests_3m,
    stop_level = -abs(stop_level)
  )
)rbind(
  data.table(dof_drawdown_stats[,.(date,drawdown)],strategy="DOF"),
  data.table(
    compute_drawdown_stats(
      backtest[
        date %in% dof$date,
        .(date,pnl=(pnl-pnl[1])*sd(diff(dof$pnl))/sd(diff(pnl)))
        ])[,.(date,drawdown)],
    strategy=paste0("bkt_",round(100*abs(stop_level),digits=0))
  )
) %>%
  ggplot() +
  geom_line(aes(x=date,y=drawdown,col=strategy),size=2,alpha=0.75) +
  ggtitle(paste0(w,"-weight vs DOF drawdowns, stoploss=",round(100*stop_level,digits=1)))

#
#
make_backtest_plot<-function(
  w,
  stop_levels=c(0.20,0.03,0.01),
  stop_type="SL",
  with_DOF=TRUE
){
  
  backtests<-mapply(
    function(stop_level)data.table(
      weighted_strategy(
        weights=weights[[w]],
        backtests=all_backtests_3m, 
        stop_level = stop_level, 
        stop_type=stop_type 
      )[
        date %in% dof$date,
        .(date,pnl=(pnl-pnl[1])*sd(diff(dof$pnl))/sd(diff(pnl)))
        ],
      strategy=paste0("bkt_",round(abs(stop_level)*100,digits=0))
    ),
    stop_level=stop_levels,
    SIMPLIFY=FALSE
  )
  
  res<-if(with_DOF){
    do.call(rbind,c(list(data.table(dof[,.(date,pnl)],strategy="DOF")),backtests))
  }else{
    do.call(rbind,backtests)
  }
  
  res %>% 
    ggplot() +
    geom_line(aes(x=date,y=pnl,col=strategy),size=2,alpha=0.75)+
    ggtitle(paste0(w,"-weight all strategies, markets vs DOF"))
  
}

@



<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

x<-make_strategy(
  strategy=strategies[[1]],
  shedule=shedule_3m[market=="spx"],
  volsurf=all_vol[market=="spx"]
)


all_backtests_3m<-readRDS("all_backtests_3m.RData")[,
   plot:=mapply(make_simple_backtest_plot,backtest=backtest,the_market=market,the_strategy=strategy)
]


all_backtests_6m_a<-readRDS("all_backtests_6m_a.RData")[,
   plot:=mapply(make_simple_backtest_plot,backtest=backtest,the_market=market,the_strategy=strategy)
]


all_backtests_6m_b<-readRDS("all_backtests_6m_b.RData")[,
   plot:=mapply(make_simple_backtest_plot,backtest=backtest,the_market=market,the_strategy=strategy)
]

NNcast<-function(
  data,
  i_name="date",
  j_name="id",
  v_name="value",
  fun=sum,
  scrub_fun=function(x)scrub(x,default=0),
  scrub=function(x, default = 0){
    if(length(x) == 0) return(default)
    x[which(!is.finite(x))] <- default
    return(x)
  }
){
  i_expr<-parse(text=as.character(i_name))
  j_expr<-parse(text=as.character(j_name))
  v_expr<-parse(text=as.character(v_name))
  i<-as.character(eval(i_expr,envir=data))
  j<-as.character(eval(j_expr,envir=data))
  x<-eval(v_expr,envir=data)
  df<-data.table(i=i,j=j,x=x)[,.(x=fun(x)),keyby="i,j"]
  is<-sort(unique(df$i))
  js<-sort(unique(df$j))
  res<-matrix(
    do.call(class(x),list(1)),
    nrow=length(is),
    ncol=length(js),
    dimnames = list(is,js)
  )
  i<-match(df$i,rownames(res))
  j<-match(df$j,colnames(res))
  res[cbind(i,j)[!is.na(df$x),]]<-df$x[!is.na(df$x)]
  scrub_fun(res)
}


backtest_3m_plot_matrix<-NNcast(
  all_backtests_3m,
  i_name="strategy",
  j_name="market",
  v_name="plot",
  fun=identity,
  scrub_fun = identity
)

backtest_6m_a_plot_matrix<-NNcast(
  all_backtests_6m_a,
  i_name="strategy",
  j_name="market",
  v_name="plot",
  fun=identity,
  scrub_fun = identity
)

backtest_6m_b_plot_matrix<-NNcast(
  all_backtests_6m_b,
  i_name="strategy",
  j_name="market",
  v_name="plot",
  fun=identity,
  scrub_fun = identity
)


@


\tableofcontents

\newpage

\section*{Document version}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
require(digest)
require(Hmisc)
@
\vskip 5mm

\begin{center}
\begin{tabular}{l l}
\hline
timestamp & \Sexpr{latexTranslate(as.character(Sys.timeDate()))} \\
data and code checksum & \Sexpr{digest(all_vol)} \\
git id & \Sexpr{system("git rev-parse HEAD",TRUE)} \\
user & \Sexpr{latexTranslate(gsub("\\\\","/",system("whoami",TRUE)))} \\
\hline
\end{tabular}
\end{center}


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

ggcol <- hue_pal(h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1)

dof_drawdown_stats<-compute_drawdown_stats(dof)

g_dof <- dof %>% 
ggplot() +
geom_line(aes(x=date,y=pnl),size=2,col=ggcol(2)[2])

g_drawdown <- dof_drawdown_stats %>%
ggplot() +
geom_line(aes(x=date,y=drawdown),size=2,col=ggcol(2)[2])




@


\newpage
\section{DOF performance}

\begin{center}
\begin{tabular}{m{10cm} m{10cm}}
\hline
\rowcolor{gray!20}
\multicolumn{1}{c}{\bf Performance}
&
\multicolumn{1}{c}{\bf Drawdown}
\\
\hline
\rowcolor{gray!20}
\multicolumn{2}{c}{\bf DOF} \\
\Sexpr{make_plot(plot(g_dof),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(g_drawdown),height="10cm",width="10cm")}
\\
\hline
\rowcolor{gray!20}
\multicolumn{2}{c}{\bf DOF Proxy} \\
\Sexpr{make_plot(plot(make_backtest_plot("equal",stop_levels=0.05,stop_type="SL")),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(make_drawdown_plot("equal",stop_level=0.05)),height="10cm",width="10cm")}
\\
\end{tabular}
\end{center}

\begin{itemize}
\item We wish to investigate the cause of infrequent, relatively large drawdowns.
\item In addition, we are looking for a simple, intuitive proxy that can be used to understand DOF performance.
\item Moreover, we investigate 3 different mitigation strategies: sizing, stop-loss and a positive tail-risk overlay.
\end{itemize}

\newpage
\section{DOF Proxy: Return quality vs stop-loss level}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
@

\begin{center}
\begin{tabular}{m{10cm} m{10cm}}
\Sexpr{make_plot(plot(make_sl_plot("equal",c("max_draw","median_draw"))),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(make_sl_plot("equal",c("max_length","median_length"))),height="10cm",width="10cm")}
\\
\Sexpr{make_plot(plot(make_sl_plot("equal",c("sharpe"),sl_levels=seq(0,0.25,length.out=100))),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(make_sl_plot("equal",c("pnl"),sl_levels=seq(0,0.25,length.out=100))),height="10cm",width="10cm")}
\\
\end{tabular}
\end{center}

\vskip 5mm

\begin{center}
\Sexpr{make_plot(plot(
  make_backtest_plot("equal",stop_levels=c(0.01,0.02,0.05,0.1,0.2),stop_type="SL",with_DOF=FALSE)
),height="15cm",width="15cm")}
\end{center}

\newpage
\section{The 90-100 PS closely matched DOF performance}

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=


@



\begin{center}
\begin{tabular}{m{10cm} m{10cm}}
\Sexpr{make_plot(plot(make_backtest_plot("putspread",stop_levels=0.2)),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(make_drawdown_plot("putspread",stop_level=0.2)),height="10cm",width="10cm")}
\\
\Sexpr{make_plot(plot(
make_sl_plot("putspread",c("max_draw","median_draw"),sl_levels=seq(0,0.25,length.out = 100))
),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(
make_sl_plot("putspread",c("max_length","median_length"),sl_levels=seq(0,0.25,length.out = 100))
),height="10cm",width="10cm")}
\\
\end{tabular}
\end{center}

\newpage
\section{return quality vs stop-loss level}

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

quality_df<-do.call(rbind,mapply(function(sl_level){
  strat<-weighted_strategy(weights[["equal"]])[date %in% dof$date]
  strat_len<- as.integer(sum(diff(strat$date)))
  proxy_pnl<-stop_loss(strat,max_loss=-abs(sl_level))
  proxy_stats<-compute_drawdown_stats(proxy_pnl[,pnl:=stopped_pnl])
  the_draw<-0.05
  data.table(
    sl_level=sl_level,
    pnl=max(proxy_stats$whole_pnl)*sl_level/max(proxy_stats$max_draw)*365/strat_len,
    sharpe=max(proxy_stats$whole_sharpe)
  )
},
sl_level=seq(0.00250,0.10,length.out=50),
SIMPLIFY=FALSE
))

g_quality_pnl<-quality_df %>% ggplot() + geom_line(aes(x=sl_level,y=pnl))+
    ggtitle("DOF Proxy stop-loss level vs P&L")

g_quality_sharpe<-quality_df %>% ggplot() + geom_line(aes(x=sl_level,y=sharpe))+
    ggtitle("DOF Proxy stop-loss level vs Sharpe")


@

\vskip 5mm

\begin{center}
\begin{tabular}{m{10cm} m{10cm}}
\Sexpr{make_plot(plot(g_quality_pnl),height="10cm",width="10cm")}
&
\Sexpr{make_plot(plot(g_quality_sharpe),height="10cm",width="10cm")}
\\
\end{tabular}
\end{center}

\vskip 5mm 

\begin{center}
\framebox{\centering\parbox{12.5cm}{``Small positions with wide stops'' are better than ``Large positions with tight stops''}}
\end{center}

\vskip 5mm 

\noindent In general, we would expect stop-losses to reduce return quality. The intuition behind this expectation is
that post-selloff rebounds are among the highest-sharpe periods in a risk-premium strategy's life. Stop-losses limit
drawdowns but also deny us participation in rebounds. On balance, return quality reduction dominates. This means that
we are better off reducing position sizes rather than tightening stops. 


\end{document}


