

\documentclass{article}


\usepackage[portrait, headheight = 0cm, margin=0.25cm, top = 0.25cm]{geometry} 
\usepackage[export]{adjustbox} 
\usepackage{graphicx}
\usepackage[dvipsnames,table]{xcolor} % [dvipsnames,table] for setting colors \usepackage{amsmath} \usepackage{xfrac}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{shapes.misc}
%\usetikzlibrary{external}
%\tikzexternalize % activate!
%\usepackage{sparklines}
\usepackage{xfrac}
\usepackage[space]{grffile}
\usepackage{hyperref}
\usepackage{listings}

\DeclareRobustCommand\Tstrut{\rule{0pt}{2.6ex}}         % = `top' strut
\DeclareRobustCommand\Bstrut{\rule[-0.9ex]{0pt}{0pt}}   % = `bottom' strut
\renewcommand{\familydefault}{\sfdefault}


\begin{document}

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
require(data.table)
require(Hmisc)

source("https://raw.githubusercontent.com/satrapade/latex_utils/master/latex_helpers_v2.R")

@


\tableofcontents

\newpage
\section{The ``carry forward'' problem}

\vskip 5mm



<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-runif(15)*100
@
\begin{center}
\begin{tabular}{l | \Sexpr{paste0(rep("l",length(x)),collapse=" ")}}
\rowcolor{gray!20}
\hline
\multicolumn{\Sexpr{length(x)+1}}{c}{An example of the ``carry forward'' problem} \\
{\tt seq\_along} & \Sexpr{paste0(seq_along(x),collapse=" & ")} \\
values & \Sexpr{paste0(round(x,digits=1),collapse=" & ")} \\
value $>$ 50 & \Sexpr{paste0(ifelse(x>50,"T","F"),collapse=" & ")} \\
\end{tabular}
\end{center}


\vskip 5mm

\noindent In the situarion depicted above, we sometimes wish to replace values for which a condition (in the example shown 
above, ``value $>$ 50'') is {\tt FALSE} with the most recent value for which that same condition was {\tt TRUE}, moving 
from left to right. This is the ``carry forward'' problem. For example, we might want to fill {\bf NA} values with the 
last valid observation in a time-series of measurments. Because this problem occurs frequently, we need a fast formula for this. 
R loops would be way too slow.

\begin{itemize}
\item We can compute the result directly using the {\tt rep} function with the vector version of 
the {\tt times} argument
\item We can compute indices into the original vector that produce the desired result using 
{\tt cummax} on the ``squelched'' {\tt seq\_along} vector
\end{itemize}

\vskip 5mm

\subsection{The solution using {\tt rep}}

\noindent The {\tt rep} function with a vector {\tt times} argument allows us to replicate individual elements
by arbitrary counts. If sum of {\tt times} is equal to the length of the original vector, we will
get a result with the same length as the original. 

\vskip 5mm

\noindent Consider the vector 1:10. We might want to replace even values with their preceding odd values.
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
x<-1:10
@

\vskip 5mm

\noindent odd values are:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
x[x%%2==1]
@

\vskip 5mm

\noindent and the number of items between odd values is:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
diff(c(which(x%%2==1),length(x)+1))
@

\vskip 5mm

\noindent replicating each element in the ``odd'' subset by the corresponding element in the repetition vector, 
gives the desired result:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
rep(x[x%%2==1],times=diff(c(which(x%%2==1),length(x)+1)))
@


\vskip 5mm

\subsection{The solution using {\tt cummax}}


\noindent {\tt cummax} naturally carries forward the recent maximum. We can apply a ``mask'' vector
containing 0 or 1 values to the {\tt seq\_along} vector to get the ``squelched'' {\tt seq\_along}
vector. Applying {\tt cummax} the ``squelched'' {\tt seq\_along} and obtain a vector of indices


\noindent A {\tt seq\_along} vector would look like this:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
1:10
@


\noindent The ``mask'' vector looks like this:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
rep(c(1,0,1),times=c(4,2,4))
@


\noindent The ``squelched'' {\tt seq\_along} vector will then be:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
1:10*rep(c(1,0,1),times=c(4,2,4))
@


\noindent Applying {\tt cummax} to the ``squelched'' {\tt seq\_along} vector carries forward non-zero values:
<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="markup">>=
cummax(1:10*rep(c(1,0,1),times=c(4,1,5)))
@


\newpage
\subsection{Carrying forward a value, version 1}

\vskip 5mm

\noindent We sometimes need to ``carry forward'' a value at a specific points in a vector. For example, we might
want to carry forward non-zero values in a time-series. We can use the {\tt times} argument of the {\tt rep} 
function to assemble the result

\vskip 5mm

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-runif(100)
loc<-x>0.9
loc_diff<-diff(c(0,which(loc),length(x)))
x_cf<-rep(c(0,x[loc]),times=loc_diff)

res<-data.table(
 x=x,
 carry_cforward=x_cf
)
  
  
@

\begin{center}
\Sexpr{make_plot(expression(
  plot(res$x),
  lines(res$carry_cforward,col="red")
),width="15cm",height="15cm",envir=environment())} 
\end{center}

\newpage
\subsection{Carrying forward a value, version 2}

\vskip 5mm

\noindent We sometimes need to ``carry forward'' a value at a specific points in a vector. For example, we might
want to carry forward non-zero values in a time-series. We can apply the condition to the {\tt seq\_along} vector
to produce a vector that has is non-zero and equal to the index of the ``carry-forward'' values. Because the
{\tt seq\_along} vector is increasing, we can use {\tt cummax} to do the ``carry-forward'' operation for us.

\vskip 5mm

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-runif(100)
loc<-x>0.9

ndx<-cummax(seq_along(x)*loc)

x_cf<-c(0,x)[ndx+1]

res<-data.table(
 x=x,
 carry_cforward=x_cf
)
  
  
@

\begin{center}
\Sexpr{make_plot(expression(
  plot(res$x),
  lines(res$carry_cforward,col="red")
),width="15cm",height="15cm",envir=environment())} 
\end{center}

\newpage
\section{The re-setting count problem}

\noindent We sometimes need to count the length over which a condition holds. This is called the {\bf re-setting sum}. For
example, in the context of some systematic strategies we would like to know how many days ago a signal was triggered.
Because of frequent use, a vectorized calculation of the {\bf re-setting sum} is needed.

\newpage
\subsection{Re-setting count, solution using {\tt cummax}}

\vskip 5mm

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
 set.seed(0)
  x<-runif(100)
  test<-x<0.9
  y<-cumsum(test)
  c(0,y-cummax(y*!test))
 
  res<-data.table(
    x=x,
    test=test*1,
    count=cumsum(test)-cummax(cumsum(test)*!test)
  )
  
  
@

\begin{center}
\begin{tabular}{m{7cm} m{7cm}}
\hline
\rowcolor{gray!20}
\multicolumn{2}{c}{re-setting sum of elements since condition is met} \\
\Sexpr{make_plot(expression(
  plot(res$x,main="value, condition"),
  points(y=res$x[res$test>0],x=which(res$test>0),col="red"),
  abline(h=0.9,col="red")
),width="7cm",height="7cm",envir=environment())} 
&
\Sexpr{make_plot(plot(res$count,main="re-setting count"),width="7cm",height="7cm")} 
\\
\end{tabular}
\end{center}

\newpage
\subsection{Resetting count, solution using partial {\tt seq\_along} concatenation}

\vskip 5mm

\noindent We sometimes need to count the length over which a condition holds. This is called the {\bf re-setting sum}. For
example, in the context of some systematic strategies we would like to know how many days ago a signal was triggered.
Because of frequent use, a vectorized calculation of the {\bf re-setting sum} is needed. We can compute the re-setting
sum by explicitly combining subsets of the {\tt seq\_along} vector as follows:

\vskip 5mm

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-runif(100)
test<-x<0.9
condition_length<-diff(c(0,which(!test),length(x)))
vcs<-mapply(function(i,s)s[1:i],i=condition_length,MoreArgs=list(s=seq_along(x)),SIMPLIFY = FALSE)
count<-do.call(c,vcs)
 
res<-data.table(
    x=x,
    test=test*1,
    count=count
)
  
@

\begin{center}
\begin{tabular}{m{7cm} m{7cm}}
\hline
\rowcolor{gray!20}
\multicolumn{2}{c}{re-setting sum of elements since condition is met} \\
\Sexpr{make_plot(expression(
  plot(res$x,main="value, condition"),
  points(y=res$x[res$test>0],x=which(res$test>0),col="red"),
  abline(h=0.9,col="red")
),width="7cm",height="7cm",envir=environment())} 
&
\Sexpr{make_plot(plot(res$count,main="re-setting count"),width="7cm",height="7cm")} 
\\
\end{tabular}
\end{center}


\newpage
\section{The outer produce problem}

\vskip 5mm

\noindent We sometimes need to create all combinations of values in 2 vectors. For example, when creating a grid of
strategy performance for all values of two parameters. The {\tt expand.grid} function can be used for this. Some
times we want to do this in-line and and avoid the extra function call. The {\tt rep} function has two parameters,
{\tt times} and {\tt each} which can be used to achieve this:

\vskip 5mm

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
item1<-paste0("square",1:3)
item2<-paste0("circle",1:3)

combinations<-data.table(
  x=rep(item1,times=length(item2)),
  y=rep(item2,each=length(item1))
)
@

\Sexpr{ntable(
  df=data.table(
    x=rep(item1,times=length(item2)),
    y=rep(item2,each=length(item1))
  ),
  title="combinations table:",
  scale="1.0"
)}


\newpage
\section{The sorting permutation matrix problem}

\vskip 5mm

\noindent It is sometimes useful to express sorting operations in the form of permutation matrices. The reason
for this is that we can chain permutations by multiplying the permutation matrices. Dense element ranks are used 
as column indices into the diagonal matrix to form the permutation matrix.

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-rnorm(100)
m<-diag(length(x))[,frank(x,ties.method = "dense")]
res<-drop(m%*%cbind(x))
@

\vskip 5mm

\begin{center}
\Sexpr{make_plot(plot(res),width="10cm",height="10cm")}
\end{center}

\newpage
\section{The moving average problem}

\vskip 5mm
\noindent Moving averages are basic ingredients for signal calculations. We need a fast method for computing these.

<<,cache=FALSE, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, results="hide">>=
set.seed(0)
x<-rnorm(100,mean=0)
x_sum<-cumsum(x)
x_moving_average<-(tail(x_sum,-10)-head(x_sum,-10))/10
@

\begin{center}
\Sexpr{make_plot(expression(
  plot(x_moving_average,type="l",ylim=range(x)),
  lines(tail(x,-10),col="red")
),width="10cm",height="10cm")}
\end{center}

\newpage
\section{The period stop-loss problem}

\end{document}

